#!/usr/bin/env python3

import AEAD_CHACHA20_POLY1305
import utils


def test():
    plaintext = "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it.".encode()
    aad = b"\x50\x51\x52\x53\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7"
    key = "80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f 90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f".replace(
        " ", ":")
    iv = "40 41 42 43 44 45 46 47".replace(" ", ":")
    const = "07 00 00 00".replace(" ", ":")
    key = utils.unserialize(key)
    iv = utils.unserialize(iv)
    const = utils.unserialize(const)
    (AEAD_construction, tag) = AEAD_CHACHA20_POLY1305.AEAD(
        aad, key, iv, const, plaintext)
    print(tag)
    with open("AEAD", 'wb') as f:
        f.write(AEAD_construction)


def decryption_test():
    key = "1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5 f0 47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0".replace(
        " ", ":")
    nonce = "00 00 00 00 01 02 03 04 05 06 07 08".replace(" ", ":")

    key = utils.unpack(key)
    nonce = utils.unpack(nonce)

    aad = b'\xf3\x33\x88\x86\x00\x00\x00\x00\x00\x00\x4e\x91'
    tag = "ee ad 9d 67 89 0c bb 22 39 23 36 fe a1 85 1f 38".replace(" ", ":")
    cipher = b'\x64\xa0\x86\x15\x75\x86\x1a\xf4\x60\xf0\x62\xc7\x9b\xe6\x43\xbd\x5e\x80\x5c\xfd\x34\x5c\xf3\x89\xf1\x08\x67\x0a\xc7\x6c\x8c\xb2\x4c\x6c\xfc\x18\x75\x5d\x43\xee\xa0\x9e\xe9\x4e\x38\x2d\x26\xb0\xbd\xb7\xb7\x3c\x32\x1b\x01\x00\xd4\xf0\x3b\x7f\x35\x58\x94\xcf\x33\x2f\x83\x0e\x71\x0b\x97\xce\x98\xc8\xa8\x4a\xbd\x0b\x94\x81\x14\xad\x17\x6e\x00\x8d\x33\xbd\x60\xf9\x82\xb1\xff\x37\xc8\x55\x97\x97\xa0\x6e\xf4\xf0\xef\x61\xc1\x86\x32\x4e\x2b\x35\x06\x38\x36\x06\x90\x7b\x6a\x7c\x02\xb0\xf9\xf6\x15\x7b\x53\xc8\x67\xe4\xb9\x16\x6c\x76\x7b\x80\x4d\x46\xa5\x9b\x52\x16\xcd\xe7\xa4\xe9\x90\x40\xc5\xa4\x04\x33\x22\x5e\xe2\x82\xa1\xb0\xa0\x6c\x52\x3e\xaf\x45\x34\xd7\xf8\x3f\xa1\x15\x5b\x00\x47\x71\x8c\xbc\x54\x6a\x0d\x07\x2b\x04\xb3\x56\x4e\xea\x1b\x42\x22\x73\xf5\x48\x27\x1a\x0b\xb2\x31\x60\x53\xfa\x76\x99\x19\x55\xeb\xd6\x31\x59\x43\x4e\xce\xbb\x4e\x46\x6d\xae\x5a\x10\x73\xa6\x72\x76\x27\x09\x7a\x10\x49\xe6\x17\xd9\x1d\x36\x10\x94\xfa\x68\xf0\xff\x77\x98\x71\x30\x30\x5b\xea\xba\x2e\xda\x04\xdf\x99\x7b\x71\x4d\x6c\x6f\x2c\x29\xa6\xad\x5c\xb4\x02\x2b\x02\x70\x9b'
    (plaintext, tag_validation) = AEAD_CHACHA20_POLY1305.chacha20_aead_decrypt(
        aad, key, nonce, [], cipher, tag)
    print(f"Decrypted plaintext:\n{plaintext.decode()}")
    print(f"Authentication status: {tag_validation}")


def all_tests():
    decryption_test()


if __name__ == "__main__":
    all_tests()
